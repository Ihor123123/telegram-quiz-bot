"""
Telegram bot handlers module
Contains all message and callback handlers for the quiz bot
"""

import logging
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from database import (
    get_user_stats, update_user_info, update_user_quiz_mode,
    record_correct_answer, record_incorrect_answer, clear_quiz_mode,
    reset_lives, get_lives_display
)
from quiz_data import (
    get_random_question, validate_answer, get_source_display_name,
    get_max_question_number
)
from keyboards import (
    get_main_menu_keyboard, get_quiz_mode_keyboard, get_quiz_control_keyboard,
    get_back_to_main_keyboard, get_continue_or_stop_keyboard, get_game_over_keyboard
)

logger = logging.getLogger(__name__)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle the /start command."""
    user = update.effective_user
    
    # Update user info in database
    update_user_info(user.id, user.username, user.first_name)
    
    welcome_text = f"""
üéì <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Quiz Bot!</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.

<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
‚Ä¢ –í—ã–±–∏—Ä–∞–µ—à—å —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å
‚Ä¢ –¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–æ–º–µ—Ä–æ–º –≤–æ–ø—Ä–æ—Å–∞
‚Ä¢ –°–ª–µ–¥–∏—à—å –∑–∞ —Å–≤–æ–∏–º–∏ —Å—Ç—Ä–∏–∫–∞–º–∏ –∏ —Ä–µ–∫–æ—Ä–¥–∞–º–∏

<b>–†–µ–∂–∏–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>
üéì <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</b> - 15 –≤–æ–ø—Ä–æ—Å–æ–≤
üìö <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</b> - 30 –≤–æ–ø—Ä–æ—Å–æ–≤  
üîÄ <b>–ú–∏–∫—Å</b> - —Å–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –æ–±–µ–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π

–£–¥–∞—á–∏ –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ! üçÄ
"""
    
    await update.message.reply_text(
        welcome_text,
        parse_mode=ParseMode.HTML,
        reply_markup=get_main_menu_keyboard()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle the /help command."""
    help_text = """
üìñ <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>–†–µ–∂–∏–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>
üéì <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å (15)</b> - –í–æ–ø—Ä–æ—Å—ã 1-15 –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
üìö <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (30)</b> - –í–æ–ø—Ä–æ—Å—ã 1-30 –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
üîÄ <b>–ú–∏–∫—Å —Ä–µ–∂–∏–º</b> - –°–ª—É—á–∞–π–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤

<b>–ö–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å:</b>
‚Ä¢ –ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
‚Ä¢ –¢—ã –ø–∏—à–µ—à—å –Ω–æ–º–µ—Ä —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 15/30)
‚Ä¢ –ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ —Ç–µ—Å—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –ü—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º - –±–æ—Ç –∂–¥–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç

<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üìä –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥—Ä—è–¥
üèÜ –†–µ–∫–æ—Ä–¥ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∏–∫ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤

<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>
‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç - –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
‚¨ÖÔ∏è –ù–∞–∑–∞–¥ - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é
"""
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            help_text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_back_to_main_keyboard()
        )
    else:
        await update.message.reply_text(
            help_text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_menu_keyboard()
        )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle button callbacks."""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == "start_quiz":
        await show_quiz_mode_selection(query)
    elif data == "statistics":
        await show_statistics(query)
    elif data == "help":
        await help_command(update, context)
    elif data == "back_to_main":
        await show_main_menu(query)
    elif data.startswith("mode_"):
        mode = data.replace("mode_", "")
        await start_quiz_mode(query, mode)
    elif data == "stop_quiz":
        await stop_quiz(query)

    else:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

async def show_main_menu(query):
    """Show the main menu."""
    user = query.from_user
    stats = get_user_stats(user.id)
    
    menu_text = f"""
üéì <b>Quiz Bot - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üî• –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: <b>{stats['current_streak']}</b>
üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{stats['best_streak']}</b>
üìà –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <b>{stats['correct_answers']}</b>/{stats['total_questions']}

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    await query.edit_message_text(
        menu_text,
        parse_mode=ParseMode.HTML,
        reply_markup=get_main_menu_keyboard()
    )

async def show_quiz_mode_selection(query):
    """Show quiz mode selection."""
    mode_text = """
üéØ <b>–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>

–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π:

üéì <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å (15)</b>
   –í–æ–ø—Ä–æ—Å—ã 1-15 –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏

üìö <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (30)</b>
   –í–æ–ø—Ä–æ—Å—ã 1-30 –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é

üîÄ <b>–ú–∏–∫—Å —Ä–µ–∂–∏–º</b>
   –°–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –æ–±–µ–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   (—Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞)
"""
    
    await query.edit_message_text(
        mode_text,
        parse_mode=ParseMode.HTML,
        reply_markup=get_quiz_mode_keyboard()
    )

async def show_statistics(query):
    """Show user statistics."""
    user_id = query.from_user.id
    stats = get_user_stats(user_id)
    
    accuracy = 0
    if stats['total_questions'] > 0:
        accuracy = (stats['correct_answers'] / stats['total_questions']) * 100
    
    stats_text = f"""
üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {query.from_user.first_name}

üî• <b>–°—Ç—Ä–∏–∫–∏:</b>
   ‚Ä¢ –¢–µ–∫—É—â–∏–π: <b>{stats['current_streak']}</b>
   ‚Ä¢ –†–µ–∫–æ—Ä–¥: <b>{stats['best_streak']}</b>

üìà <b>–û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
   ‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: <b>{stats['total_questions']}</b>
   ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <b>{stats['correct_answers']}</b>
   ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: <b>{accuracy:.1f}%</b>

{"üèÜ <b>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!</b>" if stats['best_streak'] >= 10 else "üí™ <b>–ü—Ä–æ–¥–æ–ª–∂–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!</b>"}
"""
    
    await query.edit_message_text(
        stats_text,
        parse_mode=ParseMode.HTML,
        reply_markup=get_back_to_main_keyboard()
    )

async def start_quiz_mode(query, mode):
    """Start a quiz in the specified mode."""
    user_id = query.from_user.id
    
    try:
        # Reset lives to 3 when starting a new game
        reset_lives(user_id)
        
        question_number, question_text, source = get_random_question(mode)
        update_user_quiz_mode(user_id, mode, question_number, source)
        
        mode_names = {
            'specialty': 'üéì –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å (15)',
            'direction': 'üìö –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (30)',
            'mixed': 'üîÄ –ú–∏–∫—Å —Ä–µ–∂–∏–º'
        }
        
        quiz_text = f"""
üéØ <b>–†–µ–∂–∏–º:</b> {mode_names[mode]}
"""
        
        if mode == 'mixed':
            quiz_text += f"üìã <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {get_source_display_name(source)}\n"
        
        quiz_text += f"""
‚ùì <b>{question_text}</b>

–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:
"""
        
        await query.edit_message_text(
            quiz_text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_quiz_control_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error starting quiz: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_main_keyboard()
        )

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle user's answer to a quiz question."""
    user_id = update.effective_user.id
    user_answer = update.message.text.strip()
    
    stats = get_user_stats(user_id)
    
    # Check if user is in quiz mode
    if stats['quiz_mode'] == 'none':
        return
    
    # Validate answer format
    try:
        answer_num = int(user_answer)
        max_num = get_max_question_number(stats['last_question_source'])
        if answer_num < 1 or answer_num > max_num:
            await update.message.reply_text(
                f"‚ùå –ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ {max_num}",
                reply_markup=get_quiz_control_keyboard()
            )
            return
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ (—á–∏—Å–ª–æ)",
            reply_markup=get_quiz_control_keyboard()
        )
        return
    
    # Check if answer is correct
    if validate_answer(user_answer, stats['last_question_number'], stats['last_question_source']):
        # Correct answer
        result = record_correct_answer(user_id)
        
        response_text = f"‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n"
        response_text += f"üî• –°—Ç—Ä–∏–∫: <b>{result['current_streak']}</b>\n"
        response_text += f"üèÜ –†–µ–∫–æ—Ä–¥: <b>{result['best_streak']}</b>"
        
        if result['new_record']:
            response_text += f"\n\nüéâ <b>–ù–û–í–´–ô –†–ï–ö–û–†–î!</b> üéâ"
        
        await update.message.reply_text(
            response_text,
            parse_mode=ParseMode.HTML
        )
        
        # Automatically continue with next question after 1 second
        import asyncio
        await asyncio.sleep(1)
        
        # Get next question
        user_id = update.effective_user.id
        stats = get_user_stats(user_id)
        
        try:
            question_number, question_text, source = get_random_question(stats['quiz_mode'])
            update_user_quiz_mode(user_id, stats['quiz_mode'], question_number, source)
            
            mode_names = {
                'specialty': 'üéì –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å (15)',
                'direction': 'üìö –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (30)',
                'mixed': 'üîÄ –ú–∏–∫—Å —Ä–µ–∂–∏–º'
            }
            
            next_quiz_text = f"""
üéØ <b>–†–µ–∂–∏–º:</b> {mode_names[stats['quiz_mode']]}
"""
            
            if stats['quiz_mode'] == 'mixed':
                next_quiz_text += f"üìã <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {get_source_display_name(source)}\n"
            
            next_quiz_text += f"""
‚ùì <b>{question_text}</b>

–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:
"""
            
            await update.message.reply_text(
                next_quiz_text,
                parse_mode=ParseMode.HTML,
                reply_markup=get_quiz_control_keyboard()
            )
            
        except Exception as e:
            logger.error(f"Error continuing quiz automatically: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞",
                reply_markup=get_quiz_control_keyboard()
            )
        
    else:
        # Incorrect answer
        result = record_incorrect_answer(user_id)
        
        response_text = f"""
‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!</b>

–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{stats['last_question_number']}</b>

üî• <b>–ñ–∏–∑–Ω–∏:</b> {get_lives_display(result['lives_left'])}
üíî –°—Ç—Ä–∏–∫ —Å–±—Ä–æ—à–µ–Ω.
"""
        
        if result['game_over']:
            # Game Over - show final statistics
            final_stats = get_user_stats(user_id)
            accuracy = 0
            if final_stats['total_questions'] > 0:
                accuracy = (final_stats['correct_answers'] / final_stats['total_questions']) * 100
            
            response_text += f"""

üéÆ <b>–ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê!</b>

üìä <b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üî• –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∏–∫: <b>{final_stats['current_streak']}</b>
üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{final_stats['best_streak']}</b>
üìà –¢–æ—á–Ω–æ—Å—Ç—å: <b>{accuracy:.1f}%</b>

–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! üí™
"""
            
            await update.message.reply_text(
                response_text,
                parse_mode=ParseMode.HTML,
                reply_markup=get_game_over_keyboard()
            )
            
            # Clear quiz mode
            clear_quiz_mode(user_id)
        else:
            await update.message.reply_text(
                response_text,
                parse_mode=ParseMode.HTML
            )
            
            # Automatically continue with next question after 1 second
            import asyncio
            await asyncio.sleep(1)
            
            # Get next question
            stats = get_user_stats(user_id)
            
            try:
                question_number, question_text, source = get_random_question(stats['quiz_mode'])
                update_user_quiz_mode(user_id, stats['quiz_mode'], question_number, source)
                
                mode_names = {
                    'specialty': 'üéì –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å (15)',
                    'direction': 'üìö –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (30)',
                    'mixed': 'üîÄ –ú–∏–∫—Å —Ä–µ–∂–∏–º'
                }
                
                next_quiz_text = f"""
üéØ <b>–†–µ–∂–∏–º:</b> {mode_names[stats['quiz_mode']]}
"""
                
                if stats['quiz_mode'] == 'mixed':
                    next_quiz_text += f"üìã <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {get_source_display_name(source)}\n"
                
                next_quiz_text += f"""
‚ùì <b>{question_text}</b>

–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:
"""
                
                await update.message.reply_text(
                    next_quiz_text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=get_quiz_control_keyboard()
                )
                
            except Exception as e:
                logger.error(f"Error continuing quiz automatically: {e}")
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞",
                    reply_markup=get_quiz_control_keyboard()
                )



async def stop_quiz(query):
    """Stop the current quiz."""
    user_id = query.from_user.id
    clear_quiz_mode(user_id)
    
    stats = get_user_stats(user_id)
    
    stop_text = f"""
‚èπÔ∏è <b>–¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>

üìä <b>–¢–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
üî• –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: <b>{stats['current_streak']}</b>
üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{stats['best_streak']}</b>

–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É! üí™
"""
    
    await query.edit_message_text(
        stop_text,
        parse_mode=ParseMode.HTML,
        reply_markup=get_main_menu_keyboard()
    )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle errors."""
    logger.error(f"Update {update} caused error {context.error}")
    
    if update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )
